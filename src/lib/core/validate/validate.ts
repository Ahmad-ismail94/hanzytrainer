import type{Point}from'../draw/rdp';import{discreteFrechet}from'../draw/frechet';export type Verdict='ok'|'close'|'wrong';export interface Tolerance{frechet:number;angleCosMin:number;orderTolerance:number;}export const FLEX:Tolerance={frechet:0.12,angleCosMin:0.6,orderTolerance:1};export const STRICT:Tolerance={frechet:0.08,angleCosMin:0.8,orderTolerance:0};function dirCos(a:Point,b:Point,c:Point,d:Point){const v1=[b[0]-a[0],b[1]-a[1]];const v2=[d[0]-c[0],d[1]-c[1]];const dot=v1[0]*v2[0]+v1[1]*v2[1];const n1=Math.hypot(v1[0],v1[1])||1e-9;const n2=Math.hypot(v2[0],v2[1])||1e-9;return dot/(n1*n2)}export function compareStroke(user:Point[],ref:Point[],tol:Tolerance){const df=discreteFrechet(user,ref);const a=user[0],b=user[user.length-1];const c=ref[0],d=ref[ref.length-1];const cos=dirCos(a,b,c,d);let score=1-Math.min(1,df/tol.frechet);if(cos<tol.angleCosMin)score*=0.6;let verdict:Verdict='wrong';if(df<=tol.frechet&&cos>=tol.angleCosMin)verdict='ok';else if(df<=tol.frechet*1.35)verdict='close';return{verdict,score}}export function checkOrder(userCount:number,refCount:number,tol:Tolerance){if(userCount===refCount)return true;const diff=Math.abs(userCount-refCount);return diff<=tol.orderTolerance}