import type{Point}from'./rdp';export function discreteFrechet(A:Point[],B:Point[]){const m=A.length,n=B.length;const ca:number[][]=Array.from({length:m},()=>Array(n).fill(-1));function dist(i:number,j:number){const dx=A[i][0]-B[j][0],dy=A[i][1]-B[j][1];return Math.hypot(dx,dy)}function c(i:number,j:number):number{if(ca[i][j]>-1)return ca[i][j];if(i===0&&j===0)ca[i][j]=dist(0,0);else if(i>0&&j===0)ca[i][j]=Math.max(c(i-1,0),dist(i,0));else if(i===0&&j>0)ca[i][j]=Math.max(c(0,j-1),dist(0,j));else if(i>0&&j>0)ca[i][j]=Math.max(Math.min(c(i-1,j),c(i-1,j-1),c(i,j-1)),dist(i,j));else ca[i][j]=Infinity;return ca[i][j]}return c(m-1,n-1)}